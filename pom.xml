<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.emeraldhieu.toucher</groupId>
    <artifactId>toucher</artifactId>
    <name>Toucher</name>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <properties>
        <!-- Used by maven-compiler-plugin if source and target are not configured -->
        <maven.compiler.source>${javaVersion}</maven.compiler.source>
        <maven.compiler.target>${javaVersion}</maven.compiler.target>
        <maven.compiler.release>${javaVersion}</maven.compiler.release>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven.build.timestamp.format>yyyyMMddHHmmss</maven.build.timestamp.format>

        <!--
            Something related to SecureRandom.
            See https://www.baeldung.com/java-security-egd
        -->
        <argLine>-Djava.security.egd=file:/dev/./urandom -Xmx256m</argLine>
        <run.addResources>false</run.addResources>

        <!-- Test report configs -->
        <testResultDirectory>${project.build.directory}/testResults</testResultDirectory>
        <unitTestReportDirectory>${testResultDirectory}/unitTests</unitTestReportDirectory>
        <integrationTestReportDirectory>${testResultDirectory}/integrationTests</integrationTestReportDirectory>

        <!-- Usage:
            mvn clean install -DskipTests
            mvn clean install -DskipUnitTests
            mvn clean install -DskipIntegrationTests
        -->
        <skipTests>false</skipTests>
        <skipUnitTests>${skipTests}</skipUnitTests>
        <skipIntegrationTests>${skipTests}</skipIntegrationTests>

        <!-- Versions. -->
        <javaVersion>17</javaVersion>
        <springBootVersion>3.0.0</springBootVersion>
        <mavenResourcesPluginVersion>3.2.0</mavenResourcesPluginVersion>
        <mavenSurefirePluginVersion>2.22.2</mavenSurefirePluginVersion>
        <mavenFailsafePluginVersion>2.22.2</mavenFailsafePluginVersion>
        <mavenCompilerPluginVersion>3.10.1</mavenCompilerPluginVersion>
        <nettyResolverDnsNativeMacosVersion>4.1.82.Final</nettyResolverDnsNativeMacosVersion>
        <lombokVersion>1.18.24</lombokVersion>
        <mapstructVersion>1.5.2.Final</mapstructVersion>
        <lombokMapstructBindingVersion>0.2.0</lombokMapstructBindingVersion>
        <juniversalChardetVersion>2.4.0</juniversalChardetVersion>
        <commonsIoVersion>2.11.0</commonsIoVersion>
        <commonsCodecVersion>1.11</commonsCodecVersion>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!--
                Import Spring Boot dependency management.
                See https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/htmlsingle/#using.import
            -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${springBootVersion}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!--
                Fix "Unable to load io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider,
                fallback to system defaults. This may result in incorrect DNS resolutions on MacOS." on Apple M1
                See https://stackoverflow.com/questions/65954571/spring-boot-2-4-2-dns-resolution-problem-at-start-on-apple-m1#66471176
            -->
            <dependency>
                <groupId>io.netty</groupId>
                <artifactId>netty-resolver-dns-native-macos</artifactId>
                <version>${nettyResolverDnsNativeMacosVersion}</version>
            </dependency>

            <!-- Create mappers -->
            <dependency>
                <groupId>org.mapstruct</groupId>
                <artifactId>mapstruct</artifactId>
                <version>${mapstructVersion}</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- Use embedded Tomcat servlet container -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- for testing -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Remove boilerplate code -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!--
            Fix "Unable to load io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider,
            fallback to system defaults. This may result in incorrect DNS resolutions on MacOS." on Apple M1
            See https://stackoverflow.com/questions/65954571/spring-boot-2-4-2-dns-resolution-problem-at-start-on-apple-m1#66471176
        -->
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-resolver-dns-native-macos</artifactId>
        </dependency>

        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-csv</artifactId>
        </dependency>

        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>${commonsIoVersion}</version>
        </dependency>

        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>${commonsCodecVersion}</version>
        </dependency>

    </dependencies>

    <build>
        <pluginManagement>
            <plugins>
                <!--
                    Repackage jar file into executable jar.
                    See https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/htmlsingle/#packaging
                 -->
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${springBootVersion}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <mainClass>${start-class}</mainClass>
                        <excludes>
                            <exclude>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                            </exclude>
                        </excludes>
                    </configuration>
                </plugin>

                <!--
                    Sensible resource filtering for application.properties and application.yml including profile-specific files.
                    See https://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${mavenResourcesPluginVersion}</version>
                    <configuration>
                        <delimiters>
                            <delimiter>${resourceDelimiter}</delimiter>
                        </delimiters>
                        <useDefaultDelimiters>false</useDefaultDelimiters>
                    </configuration>
                </plugin>

                <!-- Configure unit tests. -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${mavenSurefirePluginVersion}</version>
                    <configuration>
                        <!-- Force alphabetical order to have a reproducible build -->
                        <runOrder>alphabetical</runOrder>
                        <!-- Fixes a bug which will be solved in next version after 2.22.1 then this can be removed -->
                        <!-- see: https://issues.apache.org/jira/browse/SUREFIRE-1588 -->
                        <useSystemClassLoader>false</useSystemClassLoader>
                        <reportsDirectory>${unitTestReportDirectory}</reportsDirectory>
                        <skipTests>${skipUnitTests}</skipTests>
                        <!-- Disable spring cloud k8s in unit test -->
                        <systemPropertyVariables>
                            <spring.cloud.kubernetes.enabled>false</spring.cloud.kubernetes.enabled>
                        </systemPropertyVariables>
                        <excludes>
                            <exclude>**/*IntegrationTest</exclude>
                        </excludes>
                    </configuration>
                </plugin>

                <!-- Configure integration tests -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${mavenFailsafePluginVersion}</version>
                    <configuration>
                        <!-- Due to spring-boot repackage, without adding this property test classes are not found
                             See https://github.com/spring-projects/spring-boot/issues/6254 -->
                        <classesDirectory>${project.build.outputDirectory}</classesDirectory>
                        <!-- Force alphabetical order to have a reproducible build -->
                        <runOrder>alphabetical</runOrder>
                        <reportsDirectory>${integrationTestReportDirectory}</reportsDirectory>
                        <includes>
                            <include>**/*IT*</include>
                            <include>**/*IntegrationTest</include>
                            <include>**/*IntTest*</include>
                            <include>**/*CucumberIT*</include>
                        </includes>
                        <skipTests>${skipIntegrationTests}</skipTests>
                    </configuration>
                    <executions>
                        <execution>
                            <id>integration-test</id>
                            <goals>
                                <goal>integration-test</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>verify</id>
                            <goals>
                                <goal>verify</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${mavenCompilerPluginVersion}</version>
                    <configuration>
                        <source>${javaVersion}</source>
                        <target>${javaVersion}</target>
                        <annotationProcessorPaths>
                            <path>
                                <groupId>org.mapstruct</groupId>
                                <artifactId>mapstruct-processor</artifactId>
                                <version>${mapstructVersion}</version>
                            </path>
                            <!-- Recognize Lombok annotations upon build -->
                            <path>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                                <version>${lombokVersion}</version>
                            </path>
                            <!--
                                Use Lombok's builder inside mapstruct's mapperImpl.
                                See https://stackoverflow.com/questions/65955000/how-to-instruct-mapstruct-to-use-lombok-builder#65955495
                                See https://github.com/projectlombok/lombok/issues/1538#issuecomment-729651302
                            -->
                            <path>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok-mapstruct-binding</artifactId>
                                <version>${lombokMapstructBindingVersion}</version>
                            </path>
                        </annotationProcessorPaths>
                    </configuration>
                </plugin>

            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>
        </plugins>

    </build>


</project>